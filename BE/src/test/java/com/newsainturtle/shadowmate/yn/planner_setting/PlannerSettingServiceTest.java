package com.newsainturtle.shadowmate.yn.planner_setting;

import com.newsainturtle.shadowmate.follow.entity.Follow;
import com.newsainturtle.shadowmate.follow.entity.FollowRequest;
import com.newsainturtle.shadowmate.follow.repository.FollowRepository;
import com.newsainturtle.shadowmate.follow.repository.FollowRequestRepository;
import com.newsainturtle.shadowmate.planner.repository.DailyPlannerRepository;
import com.newsainturtle.shadowmate.planner.repository.TodoRepository;
import com.newsainturtle.shadowmate.planner_setting.dto.request.*;
import com.newsainturtle.shadowmate.planner_setting.dto.response.*;
import com.newsainturtle.shadowmate.planner_setting.entity.Category;
import com.newsainturtle.shadowmate.planner_setting.entity.CategoryColor;
import com.newsainturtle.shadowmate.planner_setting.entity.Dday;
import com.newsainturtle.shadowmate.planner_setting.exception.PlannerSettingErrorResult;
import com.newsainturtle.shadowmate.planner_setting.exception.PlannerSettingException;
import com.newsainturtle.shadowmate.planner_setting.repository.CategoryColorRepository;
import com.newsainturtle.shadowmate.planner_setting.repository.CategoryRepository;
import com.newsainturtle.shadowmate.planner_setting.repository.DdayRepository;
import com.newsainturtle.shadowmate.planner_setting.service.PlannerSettingServiceImpl;
import com.newsainturtle.shadowmate.social.repository.SocialRepository;
import com.newsainturtle.shadowmate.user.entity.User;
import com.newsainturtle.shadowmate.user.enums.PlannerAccessScope;
import com.newsainturtle.shadowmate.user.enums.SocialType;
import com.newsainturtle.shadowmate.user.repository.UserRepository;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class PlannerSettingServiceTest {

    @InjectMocks
    private PlannerSettingServiceImpl plannerSettingService;

    @Mock
    private CategoryRepository categoryRepository;

    @Mock
    private CategoryColorRepository categoryColorRepository;

    @Mock
    private DdayRepository ddayRepository;

    @Mock
    private UserRepository userRepository;

    @Mock
    private TodoRepository todoRepository;

    @Mock
    private FollowRequestRepository followRequestRepository;

    @Mock
    private FollowRepository followRepository;

    @Mock
    private DailyPlannerRepository dailyPlannerRepository;

    @Mock
    private SocialRepository socialRepository;

    private final User user = User.builder()
            .id(1L)
            .email("yntest@shadowmate.com")
            .password("yntest1234")
            .socialLogin(SocialType.BASIC)
            .nickname("Í±∞Î∂ÅÏù¥")
            .plannerAccessScope(PlannerAccessScope.PUBLIC)
            .withdrawal(false)
            .build();

    @Nested
    class Ïπ¥ÌÖåÍ≥†Î¶¨ {
        final CategoryColor categoryColor = CategoryColor.builder()
                .categoryColorCode("#D9B5D9")
                .build();
        final Category category = Category.builder()
                .id(1L)
                .categoryColor(categoryColor)
                .user(user)
                .categoryTitle("Íµ≠Ïñ¥")
                .categoryRemove(false)
                .categoryEmoticon("üçÖ")
                .build();

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù {
            final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                    .categoryTitle("Íµ≠Ïñ¥")
                    .categoryEmoticon("üçÖ")
                    .categoryColorId(1L)
                    .build();

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅ() {
                //given
                doReturn(Optional.empty()).when(categoryColorRepository).findById(addCategoryRequest.getCategoryColorId());

                //when
                final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.addCategory(user, addCategoryRequest));

                //then
                assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_CATEGORY_COLOR);
            }

            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù_Ïù¥Î™®Ìã∞ÏΩòÏóÜÏùå() {
                //given
                final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon(null)
                        .categoryColorId(1L)
                        .build();

                doReturn(Optional.of(categoryColor)).when(categoryColorRepository).findById(addCategoryRequest.getCategoryColorId());
                doReturn(category).when(categoryRepository).save(any(Category.class));

                //when
                final AddCategoryResponse saveCategory = plannerSettingService.addCategory(user, addCategoryRequest);

                //then
                assertThat(saveCategory.getCategoryId()).isNotNull();
                assertThat(saveCategory.getCategoryId()).isEqualTo(1L);

                //verify
                verify(categoryColorRepository, times(1)).findById(addCategoryRequest.getCategoryColorId());
                verify(categoryRepository, times(1)).save(any(Category.class));
            }

            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù_Ïù¥Î™®Ìã∞ÏΩòÏûàÏùå() {
                //given
                doReturn(Optional.of(categoryColor)).when(categoryColorRepository).findById(addCategoryRequest.getCategoryColorId());
                doReturn(category).when(categoryRepository).save(any(Category.class));

                //when
                final AddCategoryResponse saveCategory = plannerSettingService.addCategory(user, addCategoryRequest);

                //then
                assertThat(saveCategory.getCategoryId()).isNotNull();
                assertThat(saveCategory.getCategoryId()).isEqualTo(1L);

                //verify
                verify(categoryColorRepository, times(1)).findById(addCategoryRequest.getCategoryColorId());
                verify(categoryRepository, times(1)).save(any(Category.class));
            }
        }

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨ÏàòÏ†ï {
            final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                    .categoryId(1L)
                    .categoryTitle("ÏàòÌïô")
                    .categoryEmoticon("üåÄ")
                    .categoryColorId(1L)
                    .build();

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨() {
                //given
                doReturn(null).when(categoryRepository).findByUserAndId(user, updateCategoryRequest.getCategoryId());

                //when
                final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.updateCategory(user, updateCategoryRequest));

                //then
                assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_CATEGORY);
            }

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅ() {
                //given
                doReturn(category).when(categoryRepository).findByUserAndId(user, updateCategoryRequest.getCategoryId());
                doReturn(Optional.empty()).when(categoryColorRepository).findById(updateCategoryRequest.getCategoryColorId());

                //when
                final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.updateCategory(user, updateCategoryRequest));

                //then
                assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_CATEGORY_COLOR);
            }

            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù() {
                //given
                doReturn(category).when(categoryRepository).findByUserAndId(user, updateCategoryRequest.getCategoryId());
                doReturn(Optional.of(categoryColor)).when(categoryColorRepository).findById(updateCategoryRequest.getCategoryColorId());

                //when
                plannerSettingService.updateCategory(user, updateCategoryRequest);

                //then

                //verify
                verify(categoryColorRepository, times(1)).findById(updateCategoryRequest.getCategoryColorId());
                verify(categoryColorRepository, times(1)).findById(updateCategoryRequest.getCategoryColorId());
                verify(categoryRepository, times(1)).save(any(Category.class));
            }
        }

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨ÏÑ§Ï†ï_Ï°∞Ìöå {

            @Test
            void Ïπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅÎ™©Î°ùÏ°∞Ìöå() {
                //given
                final List<CategoryColor> list = new ArrayList<>();
                list.add(categoryColor);
                doReturn(list).when(categoryColorRepository).findAll();

                //when
                final GetCategoryColorListResponse result = plannerSettingService.getCategoryColorList();

                //then
                assertThat(result.getCategoryColorList()).isNotNull();
                assertThat(result.getCategoryColorList()).hasSize(1);
            }

            @Test
            void Ïπ¥ÌÖåÍ≥†Î¶¨Î™©Î°ùÏ°∞Ìöå() {
                //given
                final List<Category> list = new ArrayList<>();
                list.add(category);
                doReturn(list).when(categoryRepository).findByUserAndAndCategoryRemoveIsFalse(user);

                //when
                final GetCategoryListResponse result = plannerSettingService.getCategoryList(user);

                //then
                assertThat(result.getCategoryList()).isNotNull();
                assertThat(result.getCategoryList()).hasSize(1);
            }
        }

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨ÏÇ≠Ï†ú {
            final RemoveCategoryRequest removeCategoryRequest = RemoveCategoryRequest.builder()
                    .categoryId(1L)
                    .build();

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨() {
                //given
                doReturn(null).when(categoryRepository).findByUserAndId(user, removeCategoryRequest.getCategoryId());

                //when
                final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.removeCategory(user, removeCategoryRequest));

                //then
                assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_CATEGORY);
            }


            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨_Ìï†ÏùºÏóêÏóÜÏùå() {
                //given
                doReturn(category).when(categoryRepository).findByUserAndId(user, removeCategoryRequest.getCategoryId());
                doReturn(0L).when(todoRepository).countByCategory(category);

                //when
                plannerSettingService.removeCategory(user, removeCategoryRequest);

                //then

                //verify
                verify(categoryRepository, times(1)).findByUserAndId(any(), any(Long.class));
                verify(todoRepository, times(1)).countByCategory(any(Category.class));
                verify(categoryRepository, times(1)).deleteByUserAndId(any(), any(Long.class));
            }

            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨_Ìï†ÏùºÏóêÏûàÏùå() {
                //given
                doReturn(category).when(categoryRepository).findByUserAndId(user, removeCategoryRequest.getCategoryId());
                doReturn(1L).when(todoRepository).countByCategory(category);

                //when
                plannerSettingService.removeCategory(user, removeCategoryRequest);

                //then

                //verify
                verify(categoryRepository, times(1)).findByUserAndId(any(), any(Long.class));
                verify(todoRepository, times(1)).countByCategory(any(Category.class));
                verify(categoryRepository, times(1)).save(any(Category.class));
            }
        }
    }

    @Nested
    class ÌîåÎûòÎÑàÍ≥µÍ∞úÏó¨Î∂ÄÏÑ§Ï†ï {
        @Test
        void Ïã§Ìå®_ÏûòÎ™ªÎêúÎ≤îÏúÑÍ∞í() {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("ÏûòÎ™ªÎêúÎ≤îÏúÑÍ∞í")
                    .build();

            //when
            final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.setAccessScope(user, setAccessScopeRequest));

            //then
            assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_PLANNER_ACCESS_SCOPE);
        }

        @Test
        void ÏÑ±Í≥µ_ÌîåÎûòÎÑàÍ≥µÍ∞úÏó¨Î∂ÄÏÑ§Ï†ï_ÎπÑÍ≥µÍ∞úÏóêÏÑú_Í≥µÍ∞úÎ°ú() {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("Ï†ÑÏ≤¥Í≥µÍ∞ú")
                    .build();
            final User user2 = User.builder()
                    .id(2L)
                    .email("jntest@shadowmate.com")
                    .password("yntest1234")
                    .socialLogin(SocialType.BASIC)
                    .nickname("ÌÜ†ÎÅº")
                    .plannerAccessScope(PlannerAccessScope.PRIVATE)
                    .withdrawal(false)
                    .build();
            final User user3 = User.builder()
                    .id(3L)
                    .email("nctest@shadowmate.com")
                    .password("yntest1234")
                    .socialLogin(SocialType.BASIC)
                    .nickname("Í≥†ÏñëÏù¥")
                    .plannerAccessScope(PlannerAccessScope.PUBLIC)
                    .withdrawal(false)
                    .build();
            final List<FollowRequest> followRequestList = new ArrayList<>();
            followRequestList.add(FollowRequest.builder()
                    .id(1L)
                    .receiverId(user2)
                    .requesterId(user)
                    .build());
            followRequestList.add(FollowRequest.builder()
                    .id(2L)
                    .receiverId(user2)
                    .requesterId(user3)
                    .build());

            doReturn(followRequestList).when(followRequestRepository).findAllByReceiverId(any(User.class));
            doReturn(new ArrayList<>()).when(dailyPlannerRepository).findAllByUser(any(User.class));

            //when
            plannerSettingService.setAccessScope(user2, setAccessScopeRequest);

            //then
            verify(followRequestRepository, times(1)).findAllByReceiverId(any(User.class));
            verify(followRepository, times(2)).save(any(Follow.class));
            verify(followRequestRepository, times(1)).deleteAllByReceiverId(any(User.class));
            verify(dailyPlannerRepository, times(1)).findAllByUser(any(User.class));
            verify(socialRepository, times(1)).updateDeleteTimeAll(any(), any(List.class));
            verify(userRepository, times(1)).save(any(User.class));
        }


        @Test
        void ÏÑ±Í≥µ_ÌîåÎûòÎÑàÍ≥µÍ∞úÏó¨Î∂ÄÏÑ§Ï†ï_Í≥µÍ∞úÏóêÏÑú_ÎπÑÍ≥µÍ∞ú() {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("ÎπÑÍ≥µÍ∞ú")
                    .build();

            doReturn(new ArrayList<>()).when(dailyPlannerRepository).findAllByUser(any(User.class));

            //when
            plannerSettingService.setAccessScope(user, setAccessScopeRequest);

            //then
            verify(dailyPlannerRepository, times(1)).findAllByUser(any(User.class));
            verify(socialRepository, times(1)).updateDeleteTimeAll(any(), any(List.class));
            verify(userRepository, times(1)).save(any(User.class));
        }
    }

    @Nested
    class ÎîîÎç∞Ïù¥ {
        final Dday dday = Dday.builder()
                .id(1L)
                .ddayTitle("ÏÉùÏùº")
                .ddayDate(Date.valueOf("2023-02-09"))
                .user(user)
                .build();

        @Test
        void ÎîîÎç∞Ïù¥Îì±Î°ù_ÏÑ±Í≥µ() {
            //given
            final AddDdayRequest addDdayRequest = AddDdayRequest.builder()
                    .ddayTitle("ÏÉùÏùº")
                    .ddayDate("2023-02-09")
                    .build();

            doReturn(dday).when(ddayRepository).save(any(Dday.class));

            //when
            AddDdayResponse addDdayResponse = plannerSettingService.addDday(user, addDdayRequest);

            //then
            assertThat(addDdayResponse.getDdayId()).isNotNull();
            assertThat(addDdayResponse.getDdayId()).isEqualTo(1L);

            //verity
            verify(ddayRepository, times(1)).save(any(Dday.class));
        }

        @Nested
        class ÎîîÎç∞Ïù¥Ï°∞Ìöå {
            @Test
            void Îì±Î°ùÎêúÎîîÎç∞Ïù¥Î™©Î°ùÏù¥ÏóÜÏùå() {
                //given
                final List<Dday> list = new ArrayList<>();
                doReturn(list).when(ddayRepository).findByUserOrderByDdayDateDesc(user);

                //when
                final GetDdayListResponse ddayListResponse = plannerSettingService.getDdayList(user);

                //then
                assertThat(ddayListResponse.getDdayList()).isNotNull();
                assertThat(ddayListResponse.getDdayList()).isEmpty();
            }

            @Test
            void Îì±Î°ùÎêúÎîîÎç∞Ïù¥Î™©Î°ùÏù¥ÏûàÏùå() {
                //given
                final List<Dday> list = new ArrayList<>();
                list.add(Dday.builder()
                        .ddayTitle("ÏãúÌóò")
                        .ddayDate(Date.valueOf("2024-09-14"))
                        .user(user)
                        .build());
                list.add(dday);
                doReturn(list).when(ddayRepository).findByUserOrderByDdayDateDesc(user);

                //when
                final GetDdayListResponse ddayListResponse = plannerSettingService.getDdayList(user);

                //then
                assertThat(ddayListResponse.getDdayList()).isNotNull();
                assertThat(ddayListResponse.getDdayList()).hasSize(2);
            }
        }

        @Test
        void ÎîîÎç∞Ïù¥ÏÇ≠Ï†ú_ÏÑ±Í≥µ() {
            //given
            final RemoveDdayRequest removeDdayRequest = RemoveDdayRequest.builder()
                    .ddayId(1L)
                    .build();

            //when
            plannerSettingService.removeDday(user, removeDdayRequest);

            //then

            //verity
            verify(ddayRepository, times(1)).deleteByUserAndId(any(), any(Long.class));
        }

        @Nested
        class ÎîîÎç∞Ïù¥ÏàòÏ†ï {
            final UpdateDdayRequest updateDdayRequest = UpdateDdayRequest.builder()
                    .ddayId(1L)
                    .ddayTitle("ÏãúÌóò")
                    .ddayDate("2023-09-18")
                    .build();

            @Test
            void Ïã§Ìå®_Ïú†Ìö®ÌïòÏßÄÏïäÏùÄÎîîÎç∞Ïù¥_Í∂åÌïúÏù¥ÏóÜÎäîÎîîÎç∞Ïù¥() {
                //given
                doReturn(null).when(ddayRepository).findByUserAndId(user, 1L);

                //when
                final PlannerSettingException result = assertThrows(PlannerSettingException.class, () -> plannerSettingService.updateDday(user, updateDdayRequest));

                //then
                assertThat(result.getErrorResult()).isEqualTo(PlannerSettingErrorResult.INVALID_DDAY);
            }

            @Test
            void ÏÑ±Í≥µ() {
                //given
                doReturn(dday).when(ddayRepository).findByUserAndId(user, 1L);

                //when
                plannerSettingService.updateDday(user, updateDdayRequest);

                //then

                //verify
                verify(ddayRepository, times(1)).findByUserAndId(user, 1L);
                verify(ddayRepository, times(1)).save(any(Dday.class));
            }
        }
    }
}