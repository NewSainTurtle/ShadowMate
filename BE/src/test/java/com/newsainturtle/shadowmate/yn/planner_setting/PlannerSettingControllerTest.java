package com.newsainturtle.shadowmate.yn.planner_setting;

import com.google.gson.Gson;
import com.newsainturtle.shadowmate.auth.exception.AuthErrorResult;
import com.newsainturtle.shadowmate.auth.exception.AuthException;
import com.newsainturtle.shadowmate.auth.service.AuthService;
import com.newsainturtle.shadowmate.common.GlobalExceptionHandler;
import com.newsainturtle.shadowmate.planner.dto.request.AddDailyTodoRequest;
import com.newsainturtle.shadowmate.planner.dto.request.RemoveDailyTodoRequest;
import com.newsainturtle.shadowmate.planner.dto.request.UpdateDailyTodoRequest;
import com.newsainturtle.shadowmate.planner_setting.controller.PlannerSettingController;
import com.newsainturtle.shadowmate.planner_setting.dto.request.*;
import com.newsainturtle.shadowmate.planner_setting.exception.PlannerSettingErrorResult;
import com.newsainturtle.shadowmate.planner_setting.exception.PlannerSettingException;
import com.newsainturtle.shadowmate.planner_setting.service.PlannerSettingServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.stream.Stream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(MockitoExtension.class)
class PlannerSettingControllerTest {

    @InjectMocks
    private PlannerSettingController plannerSettingController;

    @Mock
    private PlannerSettingServiceImpl plannerSettingServiceImpl;

    @Mock
    private AuthService authServiceImpl;

    private MockMvc mockMvc;
    private Gson gson;
    final Long userId = 1L;


    @BeforeEach
    void init() {
        gson = new Gson();
        mockMvc = MockMvcBuilders.standaloneSetup(plannerSettingController)
                .setControllerAdvice(new GlobalExceptionHandler())
                .build();
    }

    @Nested
    class Ïπ¥ÌÖåÍ≥†Î¶¨ÏÑ§Ï†ï {
        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù {
            final String url = "/api/planner-settings/{userId}/categories";

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅ() throws Exception {
                //given
                final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();
                doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_CATEGORY_COLOR)).when(plannerSettingServiceImpl).addCategory(any(), any(AddCategoryRequest.class));

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void ÏÑ±Í≥µ_Ïù¥Î™®Ìã∞ÏΩòNull() throws Exception {
                //given
                final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon(null)
                        .categoryColorId(1L)
                        .build();
                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

            @Test
            void ÏÑ±Í≥µ_Ïù¥Î™®Ìã∞ÏΩòNullÏïÑÎãò() throws Exception {
                //given
                final AddCategoryRequest addCategoryRequest = AddCategoryRequest.builder()
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }
        }

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨ÏàòÏ†ï {
            final String url = "/api/planner-settings/{userId}/categories";

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                        .categoryId(1L)
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());

            }

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨() throws Exception {
                //given
                final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                        .categoryId(1L)
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();
                doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_CATEGORY)).when(plannerSettingServiceImpl).updateCategory(any(), any(UpdateCategoryRequest.class));

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅÎ≤àÌò∏() throws Exception {
                //given
                final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                        .categoryId(1L)
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();
                doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_CATEGORY_COLOR)).when(plannerSettingServiceImpl).updateCategory(any(), any(UpdateCategoryRequest.class));

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void ÏÑ±Í≥µ_Ïù¥Î™®Ìã∞ÏΩòNull() throws Exception {
                //given
                final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                        .categoryId(1L)
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon(null)
                        .categoryColorId(1L)
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

            @Test
            void ÏÑ±Í≥µ_Ïù¥Î™®Ìã∞ÏΩòÏûàÏùå() throws Exception {
                //given
                final UpdateCategoryRequest updateCategoryRequest = UpdateCategoryRequest.builder()
                        .categoryId(1L)
                        .categoryTitle("Íµ≠Ïñ¥")
                        .categoryEmoticon("üçÖ")
                        .categoryColorId(1L)
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

        }

        @Nested
        class Ïπ¥ÌÖåÍ≥†Î¶¨ÏÇ≠Ï†ú {
            final String url = "/api/planner-settings/{userId}/categories";

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final RemoveCategoryRequest removeCategoryRequest = RemoveCategoryRequest.builder()
                        .categoryId(1L)
                        .build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏπ¥ÌÖåÍ≥†Î¶¨() throws Exception {
                //given
                final RemoveCategoryRequest removeCategoryRequest = RemoveCategoryRequest.builder()
                        .categoryId(1L)
                        .build();
                doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_CATEGORY)).when(plannerSettingServiceImpl).removeCategory(any(), any(RemoveCategoryRequest.class));

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void Ïã§Ìå®_Ïπ¥ÌÖåÍ≥†Î¶¨Î≤àÌò∏Null() throws Exception {
                //given
                final RemoveCategoryRequest removeCategoryRequest = RemoveCategoryRequest.builder()
                        .categoryId(null)
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void ÏÑ±Í≥µ() throws Exception {
                //given
                final RemoveCategoryRequest removeCategoryRequest = RemoveCategoryRequest.builder()
                        .categoryId(1L)
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeCategoryRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

        }

        @Nested
        class ÌîåÎûòÎÑàÏÑ§Ï†ï_Ï°∞Ìöå {
            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨ÏÉâÏÉÅÎ™©Î°ùÏ°∞Ìöå() throws Exception {
                //given
                final String url = "/api/planner-settings/{userId}/categories/colors";

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.get(url, userId)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

            @Test
            void Ïã§Ìå®_Ïπ¥ÌÖåÍ≥†Î¶¨Î™©Î°ùÏ°∞Ìöå_ÏÇ¨Ïö©ÏûêÏóÜÏùå() throws Exception {
                //given
                final String url = "/api/planner-settings/{userId}/categories";
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.get(url, userId)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void ÏÑ±Í≥µ_Ïπ¥ÌÖåÍ≥†Î¶¨Î™©Î°ùÏ°∞Ìöå() throws Exception {
                //given
                final String url = "/api/planner-settings/{userId}/categories";

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.get(url, userId)
                );

                //then
                resultActions.andExpect(status().isOk());
            }
        }
    }

    @Nested
    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
    class Ïπ¥ÌÖåÍ≥†Î¶¨ÏÑ§Ï†ï_Ïã§Ìå®ÏºÄÏù¥Ïä§Î™®Ïùå_Ïú†Ìö®ÌïòÏßÄÏïäÏùÄÏöîÏ≤≠Í∞í {

        final String url = "/api/planner-settings/{userId}/categories";

        @ParameterizedTest
        @MethodSource("invalidAddCategoryRequest")
        void Ïπ¥ÌÖåÍ≥†Î¶¨Îì±Î°ù_Ïã§Ìå®(final AddCategoryRequest addCategoryRequest) throws Exception {
            // given

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.post(url, userId)
                            .content(gson.toJson(addCategoryRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isBadRequest());
        }

        private Stream<Arguments> invalidAddCategoryRequest() {
            return Stream.of(
                    // ÌÉÄÏù¥ÌãÄ Null
                    Arguments.of(AddCategoryRequest.builder()
                            .categoryTitle(null)
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(1L)
                            .build()),
                    // Ïú†Ìö®Í∏∏Ïù¥Í∞Ä ÏïÑÎãå ÌÉÄÏù¥ÌãÄ
                    Arguments.of(AddCategoryRequest.builder()
                            .categoryTitle("Íµ≠")
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(1L)
                            .build()),
                    // Ïú†Ìö®Í∏∏Ïù¥Í∞Ä ÏïÑÎãå Ïù¥Î™®Ìã∞ÏΩò
                    Arguments.of(AddCategoryRequest.builder()
                            .categoryTitle(null)
                            .categoryEmoticon("üçÖüçÖ")
                            .categoryColorId(1L)
                            .build())
            );
        }

        @ParameterizedTest
        @MethodSource("invalidUpdateCategoryRequest")
        void Ïπ¥ÌÖåÍ≥†Î¶¨ÏàòÏ†ï_Ïã§Ìå®(final UpdateCategoryRequest updateCategoryRequest) throws Exception {
            // given

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.put(url, userId)
                            .content(gson.toJson(updateCategoryRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isBadRequest());
        }

        private Stream<Arguments> invalidUpdateCategoryRequest() {
            return Stream.of(
                    // Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤àÌò∏ Null
                    Arguments.of(UpdateCategoryRequest.builder()
                            .categoryId(null)
                            .categoryTitle("Íµ≠Ïñ¥")
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(1L)
                            .build()),
                    // Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉÄÏù¥ÌãÄ
                    Arguments.of(UpdateCategoryRequest.builder()
                            .categoryId(1L)
                            .categoryTitle("Íµ≠")
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(1L)
                            .build()),
                    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉÄÏù¥ÌãÄ Null
                    Arguments.of(UpdateCategoryRequest.builder()
                            .categoryId(1L)
                            .categoryTitle(null)
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(1L)
                            .build()),
                    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉâÏÉÅ Î≤àÌò∏ Null
                    Arguments.of(UpdateCategoryRequest.builder()
                            .categoryId(1L)
                            .categoryTitle("Íµ≠Ïñ¥")
                            .categoryEmoticon("üçÖ")
                            .categoryColorId(null)
                            .build())
            );
        }

    }

    @Nested
    class ÌîåÎûòÎÑàÍ≥µÍ∞úÏó¨Î∂ÄÏÑ§Ï†ï {
        final String url = "/api/planner-settings/{userId}/access-scopes";

        @Test
        void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("ÎπÑÍ≥µÍ∞ú")
                    .build();
            doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.put(url, userId)
                            .content(gson.toJson(setAccessScopeRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isForbidden());
        }

        @Test
        void Ïã§Ìå®_ÏûòÎ™ªÎêúÎ≤îÏúÑÍ∞í() throws Exception {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("ÏûòÎ™ªÎêúÎ≤îÏúÑÍ∞í")
                    .build();
            doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_PLANNER_ACCESS_SCOPE)).when(plannerSettingServiceImpl).setAccessScope(any(), any(SetAccessScopeRequest.class));

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.put(url, userId)
                            .content(gson.toJson(setAccessScopeRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isBadRequest());
        }

        @Test
        void ÏÑ±Í≥µ_ÌîåÎûòÎÑàÍ≥µÍ∞úÏó¨Î∂ÄÏÑ§Ï†ï() throws Exception {
            //given
            final SetAccessScopeRequest setAccessScopeRequest = SetAccessScopeRequest.builder()
                    .plannerAccessScope("ÎπÑÍ≥µÍ∞ú")
                    .build();

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.put(url, userId)
                            .content(gson.toJson(setAccessScopeRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isOk());
        }
    }

    @Nested
    class ÎîîÎç∞Ïù¥ÏÑ§Ï†ï {
        final String url = "/api/planner-settings/{userId}/d-days";

        @Nested
        class ÎîîÎç∞Ïù¥Îì±Î°ù {
            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final AddDdayRequest addDdayRequest = AddDdayRequest.builder()
                        .ddayTitle("ÏÉùÏùº")
                        .ddayDate("2023-01-27")
                        .build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void ÏÑ±Í≥µ() throws Exception {
                //given
                final AddDdayRequest addDdayRequest = AddDdayRequest.builder()
                        .ddayTitle("ÏÉùÏùº")
                        .ddayDate("2023-01-27")
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.post(url, userId)
                                .content(gson.toJson(addDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }
        }

        @Nested
        class ÎîîÎç∞Ïù¥Ï°∞Ìöå {
            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.get(url, userId)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void ÏÑ±Í≥µ() throws Exception {
                //given

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.get(url, userId)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

        }

        @Nested
        class ÎîîÎç∞Ïù¥ÏÇ≠Ï†ú {

            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final RemoveDdayRequest removeDdayRequest = RemoveDdayRequest.builder().ddayId(1L).build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());
            }

            @Test
            void Ïã§Ìå®_ÎîîÎç∞Ïù¥ID_Null() throws Exception {
                //given
                final RemoveDdayRequest removeDdayRequest = RemoveDdayRequest.builder().ddayId(null).build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void ÏÑ±Í≥µ() throws Exception {
                //given
                final RemoveDdayRequest removeDdayRequest = RemoveDdayRequest.builder().ddayId(1L).build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.delete(url, userId)
                                .content(gson.toJson(removeDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

        }

        @Nested
        class ÎîîÎç∞Ïù¥ÏàòÏ†ï {
            @Test
            void Ïã§Ìå®_ÏóÜÎäîÏÇ¨Ïö©Ïûê() throws Exception {
                //given
                final UpdateDdayRequest updateDdayRequest = UpdateDdayRequest.builder()
                        .ddayId(1L)
                        .ddayTitle("ÏÉùÏùº")
                        .ddayDate("2023-01-27")
                        .build();
                doThrow(new AuthException(AuthErrorResult.UNREGISTERED_USER)).when(authServiceImpl).certifyUser(any(Long.class), any());

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isForbidden());

            }

            @Test
            void Ïã§Ìå®_Ïú†Ìö®ÌïòÏßÄÏïäÏùÄÎîîÎç∞Ïù¥() throws Exception {
                //given
                final UpdateDdayRequest updateDdayRequest = UpdateDdayRequest.builder()
                        .ddayId(1L)
                        .ddayTitle("ÏÉùÏùº")
                        .ddayDate("2023-01-27")
                        .build();
                doThrow(new PlannerSettingException(PlannerSettingErrorResult.INVALID_DDAY)).when(plannerSettingServiceImpl).updateDday(any(), any(UpdateDdayRequest.class));

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isBadRequest());
            }

            @Test
            void ÏÑ±Í≥µ() throws Exception {
                //given
                final UpdateDdayRequest updateDdayRequest = UpdateDdayRequest.builder()
                        .ddayId(1L)
                        .ddayTitle("ÏÉùÏùº")
                        .ddayDate("2023-01-27")
                        .build();

                //when
                final ResultActions resultActions = mockMvc.perform(
                        MockMvcRequestBuilders.put(url, userId)
                                .content(gson.toJson(updateDdayRequest))
                                .contentType(MediaType.APPLICATION_JSON)
                );

                //then
                resultActions.andExpect(status().isOk());
            }

        }
    }

    @Nested
    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
    class ÎîîÎç∞Ïù¥ÏÑ§Ï†ï_Ïã§Ìå®ÏºÄÏù¥Ïä§Î™®Ïùå_Ïú†Ìö®ÌïòÏßÄÏïäÏùÄÏöîÏ≤≠Í∞í {

        final String url = "/api/planner-settings/{userId}/d-days";

        @ParameterizedTest
        @MethodSource("invalidAddDdayRequest")
        void ÎîîÎç∞Ïù¥Îì±Î°ù_Ïã§Ìå®(final AddDdayRequest addDdayRequest) throws Exception {
            // given

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.post(url, userId)
                            .content(gson.toJson(addDdayRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isBadRequest());
        }

        private Stream<Arguments> invalidAddDdayRequest() {
            return Stream.of(
                    // ÌÉÄÏù¥ÌãÄ Null
                    Arguments.of(AddDdayRequest.builder()
                            .ddayTitle(null)
                            .ddayDate("2023-01-27")
                            .build()),
                    // Ïú†Ìö®Í∏∏Ïù¥Í∞Ä ÏïÑÎãå ÌÉÄÏù¥ÌãÄ
                    Arguments.of(AddDdayRequest.builder()
                            .ddayTitle("12345678901234567890123456789012345678901")
                            .ddayDate("2023-01-27")
                            .build()),
                    // Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÎÇ†Ïßú
                    Arguments.of(AddDdayRequest.builder()
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate("2023-13-27")
                            .build()),
                    // ÏûòÎ™ªÎêú ÎÇ†Ïßú Ìè¨Îß∑
                    Arguments.of(AddDdayRequest.builder()
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate("2023.01.27")
                            .build()),
                    // ÎÇ†Ïßú Null
                    Arguments.of(AddDdayRequest.builder()
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate(null)
                            .build())
            );
        }

        @ParameterizedTest
        @MethodSource("invalidUpdateDdayRequest")
        void ÎîîÎç∞Ïù¥ÏàòÏ†ï_Ïã§Ìå®(final UpdateDdayRequest updateDdayRequest) throws Exception {
            // given

            //when
            final ResultActions resultActions = mockMvc.perform(
                    MockMvcRequestBuilders.put(url, userId)
                            .content(gson.toJson(updateDdayRequest))
                            .contentType(MediaType.APPLICATION_JSON)
            );

            //then
            resultActions.andExpect(status().isBadRequest());
        }

        private Stream<Arguments> invalidUpdateDdayRequest() {
            return Stream.of(
                    // ÎîîÎç∞Ïù¥ ID Null
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(null)
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate("2023-01-27")
                            .build()),
                    // ÎîîÎç∞Ïù¥ ÌÉÄÏù¥ÌãÄ Null
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(1L)
                            .ddayTitle(null)
                            .ddayDate("2023-01-27")
                            .build()),
                    // Ïú†Ìö®Í∏∏Ïù¥Í∞Ä ÏïÑÎãå ÌÉÄÏù¥ÌãÄ
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(1L)
                            .ddayTitle("12345678901234567890123456789012345678901")
                            .ddayDate("2023-01-27")
                            .build()),
                    // ÎÇ†Ïßú Null
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(1L)
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate(null)
                            .build()),
                    // Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÎÇ†Ïßú
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(1L)
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate("2023-13-27")
                            .build()),
                    // ÏûòÎ™ªÎêú ÎÇ†Ïßú Ìè¨Îß∑
                    Arguments.of(UpdateDdayRequest.builder()
                            .ddayId(1L)
                            .ddayTitle("ÏÉùÏùº")
                            .ddayDate("2023.01.27")
                            .build())
            );
        }

    }
}
